name: install_oracle_instant_client

on: workflow_dispatch

jobs:
  install:
    strategy:
      matrix:
        os: [macos-latest]
        # os: [ubuntu-latest, macos-13, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    defaults:
      run:
        shell: bash

    steps:
    - name: Create setup script
      if: ${{ runner.os == 'Linux' }}
      run: |
        pwd
        mkdir scripts
        cd scripts
        cat >init.sql <<EOF
          ALTER SESSION SET CONTAINER = FREEPDB1;
          CREATE USER test IDENTIFIED BY test QUOTA UNLIMITED ON USERS;
          GRANT CONNECT, RESOURCE TO test;
          GRANT CREATE TABLE TO test;
          ALTER SESSION SET CURRENT_SCHEMA = test;
        EOF
        cat init.sql

    - name: Setup Oracle container
      if: ${{ runner.os == 'Linux' }}
      uses: gvenzl/setup-oracle-free@v1
      with:
        container-runtime: docker
        app-user: app_user
        app-user-password: app_user_password
        setup-scripts: ${{ github.workspace }}/scripts

    - name: Check Oracle container logs for errors
      if: ${{ runner.os == 'Linux' }}
      run: |
        docker container ls
        while : ; do
          docker container logs oracledb | tee -a /tmp/oracledb.log
          if grep 'DATABASE IS READY TO USE!' /tmp/oracledb.log >/dev/null; then
            break
          fi
          sleep 1s
        done
        if grep 'ERROR' /tmp/oracledb.log >/dev/null; then
          echo "[ERR] Something went wrong!"
          echo "[ERR] See above logs for more details."
          exit 1
        fi

    - name: Install Oracle Instant Client (OIC)
      run: |
        echo "RUNNER_OS: $RUNNER_OS"
        echo "RUNNER_ARCH: $RUNNER_ARCH"

        if [[ $RUNNER_OS == "Linux" && $RUNNER_ARCH == "X64" ]]; then
          echo "[INF] Installing on Linux..."

          URLS=(
            https://download.oracle.com/otn_software/linux/instantclient/instantclient-basic-linuxx64.zip
            https://download.oracle.com/otn_software/linux/instantclient/instantclient-sqlplus-linuxx64.zip
          )

          for URL in "${URLS[@]}"; do
            echo "[INF] Downloading... [$URL]"
            wget -q "$URL"
          done

          INSTALL_BASE_DIR="$GITHUB_WORKSPACE/oracle-instantclient"

          for ZIP in instantclient-*.zip; do
            unzip -q -o "$ZIP" -d "$INSTALL_BASE_DIR"
          done

          INSTALL_DIR_PATH="$(realpath "$INSTALL_BASE_DIR"/instantclient_*)"
          ls -Gghl "$INSTALL_DIR_PATH"

          echo "[INF] Setting path... [$INSTALL_DIR_PATH]"
          echo "$INSTALL_DIR_PATH" >> "$GITHUB_PATH"

          echo "$INSTALL_DIR_PATH" | sudo tee /etc/ld.so.conf.d/oracle-instantclient.conf
          sudo ldconfig

          echo "[INF] Installed successfully!"
        elif [[ $RUNNER_OS == "macOS" && $RUNNER_ARCH == "X64" ]]; then
          echo "[INF] Installing on macOS..."

          URLS=(
            https://download.oracle.com/otn_software/mac/instantclient/instantclient-basic-macos.zip
            https://download.oracle.com/otn_software/mac/instantclient/instantclient-sqlplus-macos.zip
          )

          for URL in "${URLS[@]}"; do
            echo "[INF] Downloading... [$URL]"
            wget -q "$URL"
          done

          INSTALL_BASE_DIR="$GITHUB_WORKSPACE/oracle-instantclient"

          for ZIP in instantclient-*.zip; do
            unzip -q -o "$ZIP" -d "$INSTALL_BASE_DIR"
          done

          INSTALL_DIR_PATH="$(realpath "$INSTALL_BASE_DIR"/instantclient_*)"
          ls -Gghl "$INSTALL_DIR_PATH"

          echo "[INF] Setting path... [$INSTALL_DIR_PATH]"
          echo "$INSTALL_DIR_PATH" >> "$GITHUB_PATH"

          echo "[INF] Installed successfully!"
        elif [[ $RUNNER_OS == "macOS" && $RUNNER_ARCH == "ARM64" ]]; then
          echo "[INF] Installing on macOS..."

          URLS=(
            https://download.oracle.com/otn_software/mac/instantclient/instantclient-basic-macos-arm64.dmg
            https://download.oracle.com/otn_software/mac/instantclient/instantclient-sqlplus-macos-arm64.dmg
          )

          for URL in "${URLS[@]}"; do
            echo "[INF] Downloading... [$URL]"
            wget -q "$URL"
          done

          INSTALL_BASE_DIR="$GITHUB_WORKSPACE/oracle-instantclient"

          hdiutil mount instantclient-basic-macos.arm64-23.3.0.23.09.dmg

          cd /Volumes/instantclient-basic-macos.arm64-23.3.0.23.09
          sh ./install_ic.sh

          /usr/bin/hdiutil unmount /Volumes/instantclient-basic-macos.arm64-23.3.0.23.09


          for DMG in instantclient-*.dmg; do
            hdiutil mount "$DMG"
            VOLULME="${DMG%????}"
            cd /Volumes/"$VOLULME"
            ./install_ic.sh
            /usr/bin/hdiutil unmount /Volumes/"$VOLULME"
          done

          INSTALL_DIR_PATH="$(realpath "$INSTALL_BASE_DIR"/instantclient_*)"
          ls -Gghl "$INSTALL_DIR_PATH"

          echo "[INF] Setting path... [$INSTALL_DIR_PATH]"
          echo "$INSTALL_DIR_PATH" >> "$GITHUB_PATH"

          echo "[INF] Installed successfully!"
        elif [[ $RUNNER_OS == "Windows" && $RUNNER_ARCH == "X64" ]]; then
          echo "[INF] Installing on Windows..."
        else
          echo "[ERR] Unsupported OS and/or architecture! [$RUNNER_OS|$RUNNER_ARCH]"
          exit 1
        fi

    - name: Check sqlplus version
      run: sqlplus -V

    - name: Run SQL queries
      if: ${{ runner.os == 'Linux' }}
      run: |
        sqlplus -s test/test@localhost:1521/FREEPDB1 <<EOF
          CREATE TABLE Test
          (
            ID INT
          );
          INSERT INTO Test (ID) VALUES(123);
          INSERT INTO Test (ID) VALUES(456);
          INSERT INTO Test (ID) VALUES(789);
        EOF

        sqlplus -s test/test@localhost:1521/FREEPDB1 <<< "SELECT * FROM Test;"
