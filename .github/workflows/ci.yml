name: ci

on:
  push:
    branches: [main]
    paths-ignore: ['**.md']
  pull_request:
    branches: [main]
    paths-ignore: ['**.md']
  release:
    branches: [main]
    types: [created]

jobs:
  ci:
    name: ci
    strategy:
      matrix:
        # os: [ubuntu-20.04]
        os: [ubuntu-latest]
        # os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    env:
      DIR: 'test'
      FILE: test.txt

    steps:
      # - name: Checkout
      #   uses: actions/checkout@v3

      - name: Join env vars
        env:
          # FILEPATH: ${{ format('{0}/{1}', env.DIR, env.FILE) }}
          FILEPATH: file:${{ env.DIR }}\${{ env.FILE }}
        run: |
          echo $FILEPATH

      # - name: Checkout
      #   uses: actions/checkout@v3
      #   with:
      #     path: test-path

      # - name: pwd and ls
      #   run: |
      #     pwd
      #     ls
      #     ls test-path

      # - name: Check github.ref and github.ref_name (${{ github.ref }} and ${{ github.ref_name }})
      #   run: |
      #     echo $GITHUB_REF
      #     echo $GITHUB_REF_NAME
      #     echo $GITHUB_BASE_REF

      # - name: Get changes files via git
      #   shell: python
      #   run: |
      #     import os
      #     import subprocess
      #     github_sha = os.environ['GITHUB_SHA']
      #     print(f"github_sha: {github_sha}")
      #     cmd = f"git diff-tree --no-commit-id --name-only -r {github_sha}"
      #     print(f"cmd: {cmd}")
      #     git_diff = subprocess.getoutput(cmd)
      #     print(f"git_diff: {git_diff}")
      #     print(f"done")

      # - name: Run mpstat in the background
      #   run: |
      #     pwd
      #     mpstat -P ALL 1 > telemetry.out 2> telemetry.err < /dev/null &

      # - name: Wait and check output of mpstat
      #   run: |
      #     pwd
      #     sleep 5
      #     kill -9 $(pidof mpstat)
      #     ls -l telemetry.*
      #     cat telemetry.out

      # - name: Get tag and set TAG env var
      #   if: ${{ startsWith(github.ref, 'refs/tags/v') }}
      #   shell: bash
      #   run: |
      #     TAG=$(echo $GITHUB_REF | cut -d '/' -f3)
      #     echo "TAG: $TAG"
      #     if [[ $TAG == "v"* ]]; then
      #       TAG="${TAG:1}"
      #     fi
      #     echo "TAG: $TAG"
      #     echo "TAG=$TAG" >> $GITHUB_ENV

      # - name: Check tag
      #   if: ${{ startsWith(github.ref, 'refs/tags/v') }}
      #   shell: bash
      #   run: |
      #     echo "TAG: $TAG"

      # - name: Push to another repo
      #   env:
      #     TEST_DEPLOY_KEY: ${{ secrets.TEST_DEPLOY_KEY }}
      #     TEST_DEPLOY_KEY_FILE: "test_deploy_key_file"
      #   run: |
      #     echo "$TEST_DEPLOY_KEY" > "$TEST_DEPLOY_KEY_FILE"
      #     chmod 400 "$TEST_DEPLOY_KEY_FILE"
      #     export GIT_SSH_COMMAND="ssh -i $PWD/$TEST_DEPLOY_KEY_FILE -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
      #     git config --global user.name "CI"
      #     git config --global user.email "ci@localhost"
      #     git clone git@github.com:iamazeem/study.git
      #     cd study
      #     echo "$(date)" > test.file
      #     git add test.file
      #     git commit -m "Add test.file"
      #     git push origin main
      #     cd ..
      #     rm -rf study
      #     echo "DONE"

      # - name: Calculate SHA256 on macOS
      #   run: |
      #     TAR='zsv-0.1.0-alpha-amd64-macosx-gcc.tar.gz'
      #     wget -q "https://github.com/liquidaty/zsv/releases/download/v0.1.0-alpha/$TAR"
      #     ls -Gghl "$TAR"
      #     openssl dgst -sha256 "$TAR" | cut -d ' ' -f2 | tr -d '\n'

      # - name: Install and test zsv
      #   run: |
      #     brew tap liquidaty/zsv
      #     brew install zsv
      #     echo "Version: $(zsv version)"

      # - name: Compile test program with gcc-11
      #   if: runner.os == 'macOS'
      #   run: |
      #     cd c
      #     tar xvf utf8proc-2.6.1.tar.gz
      #     cd utf8proc-2.6.1
      #     make prefix=$PWD/build install
      #     cd ..
      #     gcc-11 --version
      #     gcc-11 -Iinclude -Iutf8proc-2.6.1/build/include main.c -o main utf8proc-2.6.1/build/lib/libutf8proc.a
      #     ./main

      # - name: Set env var
      #   run: |
      #     echo "VAR=test" >> $GITHUB_ENV

      # - name: Get env var
      #   run: |
      #     echo "VAR: ${{ env.VAR }}"

      # - name: Reset env var
      #   run: |
      #     echo "VAR=" >> $GITHUB_ENV

      # - name: Get env var
      #   run: |
      #     echo "VAR: ${{ env.VAR }}"

      # - name: Set up macOS
      #   if: runner.os == 'macOS'
      #   run: |
      #     brew install coreutils tree autoconf automake libtool

      # - name: Install jq
      #   # if: runner.os == 'Linux'
      #   run: |
      #     git clone https://github.com/stedolan/jq.git
      #     cd jq
      #     git checkout cff5336
      #     autoreconf -fi
      #     CFLAGS='-O3' ./configure \
      #       --disable-maintainer-mode \
      #       --without-oniguruma \
      #       --disable-docs \
      #       --disable-shared \
      #       --enable-static
      #     sudo make install
      #     which jq

      # - name: Create file
      #   run: |
      #     echo 'test' > $FILE
      #     cat $FILE

      # - name: Create Test RPM
      #   run: |
      #     sudo apt install -y rpm alien
      #     rm -rf ~/rpmbuild
      #     mkdir -p ~/rpmbuild/SPECS ~/rpmbuild/SOURCES
      #     echo ">> Creating Test script"
      #     cat << EOF > ~/rpmbuild/SOURCES/Test
      #     #!/bin/sh
      #     echo "testing..."
      #     EOF
      #     chmod +x ~/rpmbuild/SOURCES/Test
      #     ls -Gghl ~/rpmbuild/SOURCES/Test
      #     cat ~/rpmbuild/SOURCES/Test
      #     echo ">> Creating spec file"
      #     cat << EOF > ~/rpmbuild/SPECS/Test.spec
      #     %define _rpmfilename Test.rpm
      #     Name: Test
      #     Version: 1
      #     Release: 1%{?dist}
      #     Summary: Test
      #     License: MIT

      #     %description
      #     Testing RPM creation

      #     %prep
      #     cp -fa %{_sourcedir}/Test %{_builddir}/Test

      #     %install
      #     mkdir -p %{buildroot}/%{_bindir}
      #     cp -fa %{_builddir}/Test %{buildroot}/%{_bindir}/
      #     tree %{buildroot}

      #     %files
      #     %{_bindir}/Test
      #     EOF
      #     cat ~/rpmbuild/SPECS/Test.spec
      #     cd ~/rpmbuild/SPECS
      #     rpmbuild -bb Test.spec
      #     ls -hl ~/rpmbuild/RPMS/
      #     echo "Installing RPM with alien"
      #     sudo alien -i ~/rpmbuild/RPMS/Test.rpm
      #     which Test
      #     Test
      #     echo "--- [DONE] ---"

      # - name: Get tag
      #   if: startsWith(github.ref, 'refs/tags/v')
      #   id: tag
      #   uses: dawidd6/action-get-tag@v1
      #   with:
      #     strip_v: true

      # - name: Use tag
      #   if: startsWith(github.ref, 'refs/tags/v')
      #   env:
      #     TAG: ${{ steps.tag.outputs.tag }}
      #   run: |
      #     mv $FILE "$TAG-$FILE"
      #     ls -Gghl

      # - name: Set up ccache
      #   uses: hendrikmuhs/ccache-action@v1.2

      # - name: Verify ccache and update GITHUB_PATH
      #   run: |
      #     which ccache
      #     ccache --version
      #     echo '/usr/lib/ccache' >> $GITHUB_PATH
      #     which gcc
      #     echo '--- [DONE] ---'

      # - uses: rui314/setup-mold@2a0eac129273d80a0511fcf8aa9d1986fafa16d2
      #   with:
      #     mold-version: 1.1.1

      # - name: Run script
      #   run: |
      #     echo 'Testing...'
      #     which gcc
      #     which g++
      #     go env
      #     which ld
      #     whereis ld
      #     realpath /usr/bin/ld
      #     ld --version
      #     echo '--- [DONE] ---'

      # - name: Generate artifact
      #   run: |
      #     echo 'Test' > artifact.txt

      # - name: Upload artifact [macOS]
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: artifact.txt
      #     path: artifact.txt
      #     if-no-files-found: error
      #     retention-days: 1

      # - name: Release
      #   uses: softprops/action-gh-release@v1
      #   if: startsWith(github.ref, 'refs/tags/')
      #   with:
      #     files: |
      #       artifact.txt

      # - name: Build docker image
      #   run: |
      #     docker build . -t ruby-thrift:latest
